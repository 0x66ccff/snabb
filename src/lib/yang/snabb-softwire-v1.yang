module snabb-softwire-v1 {
  namespace snabb:lwaftr;
  prefix softwire;

  import ietf-inet-types { prefix inet; }

  organization "Igalia, S.L.";
  contact "Jessica Tallon <tsyesika@igalia.com>";
  description
   "Configuration for the Snabb Switch lwAFTR.";

  revision 2016-11-04 {
    description
     "Initial revision.";
  }

  container softwire-config {
    description
     "Configuration for Snabb lwaftr.";

    leaf ipv4-ip {
      type inet:ipv4-address;
      mandatory true;
      description
       "IPv4 address of the internet facing NIC.";
    }

    leaf ipv6-ip {
      type inet:ipv6-address;
      mandatory true;
      description
       "IPv6 address of the internal facing NIC.";
    }

    leaf mac-b4 {
      type inet:mac-address;
      mandatory true;
      description
       "MAC address of the internal facing NIC.";
    }

    leaf mac-inet {
      type inet:mac-address;
      mandatory true;
      description
       "MAC address of the internet facing NIC.";
    }

    leaf hairpinning {
      type boolean;
      default true;
      description
       "Indicates whether to support hairpinning of traffic between
        two B4s.";
    }

    container mtu {
      description
       "The MTU settings are used to determine whether a packet
        needs to be fragmented.  Note that the MTU settings are
        static; they do not update if a peer sends an ICMP
        packet-too-big message.";

      leaf ipv4-mtu {
        type uint16;
        default 1460;
        description
         "Maximum packet size to send on the IPv4 interface.";
      }

      leaf ipv6-mtu {
        type uint16;
        default 1500;
        description
         "Maximum packet size to sent on the IPv6 interface.";
      }
    }

    container L2-next-hop {
      description
       "The next-hop settings are used to indicate the next hops on
        the internet-facing and internal-facing interfaces.

        One can specify a next-hop as either layer 3 or a layer 2
        address.  In the former case, the lwAFTR will use ARP or NDP
        (as appropriate) to resolve the L2 addresses.  In the latter
        case, the L2 next-hop addresses instead are statically
        configured by the administrator."

      leaf b4-mac {
        type inet:mac-address;
        description
         "Statically configured MAC address of the next hop for the
          internal-facing NIC.";
      }

      leaf inet-mac {
        type inet:mac-address;
        description
         "Statically configured MAC address of the next hop for the
          internet-facing NIC.";
      }

      leaf inet-ipv4 {
        type inet:ipv4-address;
        description
         "IPv4 address of the next hop for the internet-facing NIC.
          The lwAFTR will resolve this to a MAC address using ARP.";
      }

      leaf b4-ipv6 {
        type inet:ipv6-address;
        description
         "IPv6 address of the next hop for the internal-facing NIC.
          The lwAFTR will resolve this to a MAC address using NDP.";
      }
    }

    container rate-limiting-icmp {
      description
       "These settings limit the rate of ICMP error message
        transmission.";

      leaf packets {
        type uint32;
        default 600000;
        description
         "The number of ICMP error messages which can be sent within
          the time period.";
      }

      leaf seconds {
        type uint32 { range 1..max }
        default 2;
        description
         "The time period given in seconds.";
      }
    }

    container icmp-handling-policies {
      description
       "The lwAFTR can be configured to allow or drop incoming and
        outgoing ICMPv4 and ICMPv6 messages.";

      typedef packet-policy {
        type enumeration {
          enum allow {
            value 0;
            description
             "Allow packets.";
          }
          enum deny {
            value 1;
            description
             "Deny packets.";
          }
        }
        description
         "Policy for what to do with packets, either allow or deny
          them.";
      }

      leaf icmpv4-incoming {
        type packet-policy;
        default allow;
        description
         "Whether to allow incoming ICMPv4 messages.";
      }

      leaf icmpv4-outgoing {
        type packet-policy;
        default allow;
        description
         "Whether to generate outgoing ICMPv4 error amessages.";
      }

      leaf icmpv6-incoming {
        type packet-policy;
        default allow;
        description
         "Whether to allow incoming ICMPv6 messages.";
      }

      leaf icmpv6-outgoing {
        type packet-policy;
        default allow;
        description
         "Whether to generate outgoing ICMPv6 error messages.";
      }
    }

    container vlan-tagging {
      description
       "This configures 802.1Q Ethernet tagging.  If tagging is
        enabled the outbound and inbound tags must be specified.";

      typedef vlan-tag {
        type uint16 {
          range 0..4095;
        }
        description
         "An 802.1Q Ethernet VLAN tag.";
      }

      leaf vlan-tagging {
        type boolean;
        default true;
        description
         "Enables or disables VLAN tagging.";
      }

      leaf v4-tag {
        type vlan-tag;
        description
         "VLAN tag for IPv4 interface.";
      }

      leaf v6-tag {
        type vlan-tag;
        description
         "VLAN tag for IPv6 interface.";
      }
    }

    container filters {
      description
       "This configures the ingress and egress filters for each
        NIC.  If set, these should be a pflang filter.  pflang is
        the language of tcpdump, libpcap and other tools.  Note that
        if VLAN tagging is enabled, the the filters will run on the
        packets after VLAN tags have been stripped off.";

      leaf ipv4-ingress-filter {
        type string;
        description
         "IPv4 ingress filter.";
      }

      leaf ipv4-egress-filter {
        type string;
        description
         "IPv4 egress filter.";
      }

      leaf ipv6-ingress-filter {
        type string;
        description
         "IPv6 ingress filter.";
      }

      leaf ipv6-egress-filter {
        type string;
        description
         "IPv6 egress filter.";
      }
    }
  }

  container binding-table {
    description
     "The binding table is a collection of softwire tunnels.  One
      endpoint of the softwire is the lwAFTR and the other is the
      B4.  It contains information so the lwAFTR knows which IPv4
      (or part of an IPv4 address) is associated with which B4.";

    list binding-entry {
      key "binding-ipv6info";
      description
       "Defines the set of IPv4 addresses that are provisioned by a
        lwAFTR.  It also defines the way in which those addresses
        are shared by specifying the psid_length and shift.  See RFC
        7597 for more details on the PSID scheme for sharing IPv4
        addresses.";

      leaf binding-ipv6info {
        type union {
           type inet:ipv6-address;
           type inet:ipv6-prefix;
        }
        mandatory false;
      }

      leaf binding-ipv4-addr {
        type inet:ipv4-address;
        mandatory true;
      }

      container port-set {
        leaf psid-offset {
          type uint8 {
            range 0..16;
          }
          mandatory true;
        }

        leaf psid-len {
          type uint8 {
             range 0..15;
          }
          mandatory true;
        }

        leaf psid {
          type uint16;
          mandatory true;
        }
      }

      leaf br-ipv6-addr {
        type inet:ipv6-address;
        mandatory true;
      }

      leaf lifetime {
        type uint32;
        units seconds;
      }
    }

    list br-addresses {
      key ipv6-address;

      leaf ipv6-address {
        type inet:ipv6-address;
      }
    }

    list binding-table-entry {
      key "ipv4-address psid";

      leaf ipv4-address {
        type inet:ipv4-address;
        mandatory true;
        description
         "Public IPv4 address of the softwire.";
      }

      leaf psid {
        type uint16;
        mandatory true;
        description
         "Port set ID";
      }

      leaf padding {
        type uint16;
        description
         "Zeros";
      }

      leaf br {
        type uint32;
        mandatory true;
        description
         "Border router";
      }

      leaf ipv6-address {
        type inet:ipv6-address;
        mandatory true;
        description
         "Address of the B4";
      }
    }
  }
}
