#!/usr/bin/env bash

bringup() {
ip netns add r2
ip netns add app1
ip netns add app2
ip netns add app3
ip netns add lisp

ip link add netns app1 e0 address 00:00:00:00:01:01 type veth peer name e1 netns r2 address 00:00:00:00:00:01
ip link add netns app2 e0 address 00:00:00:00:01:02 type veth peer name e2 netns r2 address 00:00:00:00:00:02
ip link add netns app3 e0 address 00:00:00:00:01:03 type veth peer name e3 netns r2 address 00:00:00:00:00:03
ip link add netns lisp e0 address 00:00:00:00:01:04 type veth peer name e4 netns r2 address 00:00:00:00:00:04

ip netns exec r2 ip addr add fd80:1::1/56 dev e1
ip netns exec r2 ip addr add fd80:2::1/56 dev e2
ip netns exec r2 ip addr add fd80:3::1/56 dev e3
ip netns exec r2 ip addr add fd80:4::1/56 dev e4

ip netns exec app1 ip addr add fd80:1::2/56 dev e0
ip netns exec app2 ip addr add fd80:2::2/56 dev e0
ip netns exec app3 ip addr add fd80:3::2/56 dev e0
ip netns exec lisp ip addr add fd80:4::2/56 dev e0

ip netns exec app1 ip -6 route add default via fd80:1::1
ip netns exec app2 ip -6 route add default via fd80:2::1
ip netns exec app3 ip -6 route add default via fd80:3::1
ip netns exec lisp ip -6 route add default via fd80:4::1

ip netns exec app1 ip link set e0 up
ip netns exec app2 ip link set e0 up
ip netns exec app3 ip link set e0 up
ip netns exec lisp ip link set e0 up

ip netns exec r2 sysctl -wq net.ipv6.conf.all.forwarding=1

ip netns exec r2 ip link set e1 up
ip netns exec r2 ip link set e2 up
ip netns exec r2 ip link set e3 up
ip netns exec r2 ip link set e4 up

if false; then
# NOTE: l2tp ip-over-ipv6 encapsulation doesn't work with namespaces.
# Hence we're using our own little Lua script which does the same thing in userspace.
modprobe l2tp_ip6
modprobe l2tp_eth
modprobe l2tp_core
modprobe l2tp_netlink
ip netns exec app1 ip l2tp add tunnel tunnel_id 1 peer_tunnel_id 1 encap ip local fd80:1::2 remote fd80:4::2
ip netns exec app2 ip l2tp add tunnel tunnel_id 1 peer_tunnel_id 1 encap ip local fd80:2::2 remote fd80:4::2
ip netns exec app3 ip l2tp add tunnel tunnel_id 1 peer_tunnel_id 1 encap ip local fd80:3::2 remote fd80:4::2
ip netns exec app1 ip l2tp add session name t0 tunnel_id 1 session_id 4660 peer_session_id 4660
ip netns exec app2 ip l2tp add session name t0 tunnel_id 1 session_id 4660 peer_session_id 4660
ip netns exec app3 ip l2tp add session name t0 tunnel_id 1 session_id 4660 peer_session_id 4660
ip netns exec app1 ip link set t0 up
ip netns exec app2 ip link set t0 up
ip netns exec app3 ip link set t0 up
ip netns exec lisp ip l2tp add tunnel tunnel_id 1 peer_tunnel_id 1 encap ip local fd80:4::2 remote fd80:1::2
ip netns exec lisp ip l2tp add session name t0 tunnel_id 1 session_id 17185 peer_session_id 4660
ip netns exec lisp ip link set t0 up
else
ip netns exec app1 tunctl -t t0
ip netns exec app2 tunctl -t t0
ip netns exec app3 tunctl -t t0
ip netns exec app1 ip link set address 00:00:00:00:aa:01 dev t0
ip netns exec app2 ip link set address 00:00:00:00:aa:02 dev t0
ip netns exec app3 ip link set address 00:00:00:00:aa:03 dev t0
ip netns exec app1 ifconfig t0 10.0.0.1/24 up
ip netns exec app2 ifconfig t0 10.0.0.2/24 up
ip netns exec app3 ifconfig t0 10.0.0.3/24 up
./l2tp.app1 start
./l2tp.app2 start
./l2tp.app3 start
fi
./lisp start
./lisper start
}

teardown() {
./l2tp.app1 stop
./l2tp.app2 stop
./l2tp.app3 stop
./lisp stop
./lisper stop
ip netns del r2
ip netns del app1
ip netns del app2
ip netns del app3
ip netns del lisp
}

if [ "$1" ]; then $1; else bringup; fi
